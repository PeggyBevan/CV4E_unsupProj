#playing around with different methods

###trying out clustering
#BZ01 = fit = umap.UMAP()
#%time BZ01 = fit.fit_transform(vecsbysite['BZ01'])
plot = plt.scatter(BZ01[:,0], BZ01[:,1], c = BZ01s, s = 0.1)
plt.scatter(standard_embedding[:, 0], standard_embedding[:, 1], c=mnist.target.astype(int), s=0.1, cmap='Spectral');
#how many species in BZ01?
len(set(BZ01s))


from sklearn import metrics
from sklearn.metrics import pairwise_distances
from sklearn import datasets

#if k is known:
kmeans_labels = cluster.KMeans(n_clusters=k).fit_predict(vecsbysite['BZ01'])
(
    adjusted_rand_score(BZ01s, kmeans_labels),
    adjusted_mutual_info_score(BZ01s, kmeans_labels)
)

sil = []
kmax = 30
#finding optimal value of k using the silhouette coefficient

for k in range(2, kmax+1):
  kmeans = cluster.KMeans(n_clusters = k).fit(vecsbysite['NP09'])
  labels = kmeans.labels_
  sil.append(metrics.silhouette_score(vecsbysite['NP09'], labels, metric = 'euclidean'))

#find index of max silhouette and add 2 (0 = 2)
optimk = sil.index(max(sil))+2 

plt.scatter(BZ01[:, 0], BZ01[:, 1], c=kmeans_labels, cmap='Spectral');

#test performance 
(
    adjusted_rand_score(BZ01s, kmeans_labels),
    adjusted_mutual_info_score(BZ01s, kmeans_labels)
)


#trying HBDSCAN
BZ01_hbd = PCA(n_components=50).fit_transform(vecsbysite['BZ01'])
hdbscan_labels = hdbscan.HDBSCAN(min_samples=10, min_cluster_size=1).fit_predict(BZ01_hbd)

#playing with umap
clusterable_embedding = umap.UMAP(
    n_neighbors=30,
    min_dist=0.0,
    n_components=2,
    random_state=42,
).fit_transform(vecsbysite['BZ01'])

labels = hdbscan.HDBSCAN(
    min_samples=10,
    min_cluster_size=3,
).fit_predict(clusterable_embedding)